#! /usr/local/bin/node

var spawn = require('child_process').spawn;
var getGreens = require('./src/getGreens');
var _ = require('lodash');
var clc = require('cli-color');

var home = process.env.HOME;
var globalDirConfig = {
	alm: {
		dir: home + '/projects/alm/alm-webapp',
		args: []
	},
	appsdk: {
		dir: home + '/projects/appsdk',
		args: []
	},
	appCatalog: {
		dir: home + '/projects/app-catalog',
		args: []
	}
};


function printInstructionsAndExit () {
	console.log([
		'Usage',
		'=====',
		'git3 [<git-command>...] [-g | --greens]',
		'This script will execute git with the arguments you specify in the appsdk, app-catalog, and alm-webapp repos.',
		'The [-g | --greens] will add the latest green commit SHA to the end of the git commands.',
		'',
		'Example',
		'=======',
		'$: git3 checkout -b feature1 -g #does the equivalent of the following...',
		'',
		'$: cd ~/projects/appsdk',
		'$: git checkout -b feature1 <latest-appsdk-green-sha1>',
		'$: cd ~/projects/app-catalog',
		'$: git checkout -b feature1 <latest-app-catalog-green-sha1>',
		'$: cd ~/projects/alm/alm-webapp',
		'$: git checkout -b feature1 <latest-alm-green-sha1>',
		''
	].join('\n'));
	process.exit(1);
}

function validateAndRun (args) {

	if (args.length < 1) {
		console.log(clc.red('\nERROR! Incorrect usage!\n'));
		printInstructionsAndExit();
		return;
	}

	if (['--greens', '-g'].indexOf(args[args.length - 1]) !== -1) {
		args.pop();
		runWithGreens(args);
		return;
	}

	runInDirectories(_.clone(globalDirConfig, true), 'git', args);
}

function runWithGreens (scriptArgs) {
	getGreens.getGreens(function (commits) {
		getGreens.printOutput(commits);

		var dirConfig = _.clone(globalDirConfig, true);
		dirConfig.alm.args = [commits.alm.commit];
		dirConfig.appsdk.args = [commits.appsdk.commit];
		dirConfig.appCatalog.args = [commits.appCatalog.commit];

		runInDirectories(dirConfig, 'git', scriptArgs);
	});
}

function spawnAndRunScript (dir, command, commandArgs) {
	var out = [];
	var spawnedProcess = spawn(command, commandArgs, {
		cwd: dir
	});

	spawnedProcess.stdout.on('data', function (data) {
		out.push(data);
	});

	spawnedProcess.stderr.on('data', function (data) {
		out.push(data);
	});

	spawnedProcess.on('close', function (code) {
		log(clc.bold([command, commandArgs.join(' ')].join(' ')) + ' # in ' + dir);

		console.log(out.join(''));

		if (code !== 0) {
			console.log(clc.red(['child process exited with code', code, '\n'].join(' ')));
		}
	});
}

function runInDirectories(dirConfig, command, commandArgs) {
	log('running commands in directories');
	_.each(dirConfig, function (obj) {
		spawnAndRunScript(obj.dir, command, commandArgs.concat(obj.args));
	});
}

function log(message) {
	console.log(clc.blue('[git3] ' + message));
}

validateAndRun(process.argv.slice(2));
